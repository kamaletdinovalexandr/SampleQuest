- В InteractionController разделить функционал по модулям. Модуль ввода (получения объекта под курсором) желательно выделить в отдельный класс. Выделить из методов взаимодействия объектов работу с UI, чтобы они не смешивались.
 - Описать на диаграмме текущую логику взаимодействия различных элементов (то, что сейчас в FixedUpdate). Вынести этот функционал в отдельный класс, который ни от чего не должен зависеть, чтобы его можно было протестировать (если получится - выделить тестируемый функционал и написать тесты). Если логика есть в ItemView и наследниках, вынести её оттуда.
 - Применить LINQ, используя лямбда-выражения и методы. Желательно применить их там, где это повысит понятность.
 - Добавить индексатор (C#), где он уместен.
 - Определить, где будет уместно использование интерфейсов. Обосновать, зачем (и какие есть альтернативы), реализовать.
{
	- Инвентарь по своей сути является хранилищем, а в хранилище можно либо положить предмет, либо забрать предмет. Интерфейс для взаимодействия с инвентарем должен описывать только эти действия. Объявив интерфейс IInventory в модуле Inventory - откроем доступ на взаимодействие с инвентарем для других модулей. В интерфейсе IInventory объявим методы GetItem(извлечь предмет) и PutItem(добавить предмет) и реализуем их в InventoryManager. Этих методов достаточно для взаимодействия с инвентарем.
}

 - По геймплею: продумать сохранение состояния сцен - чтобы можно было со сцены вернуться на предыдущую. Эту часть задания выполнять только когда будут полностью готовы предыдущие. Если останется время - реализовать.